import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import type { AppState } from '../../renderer/store'
import { postClientApp } from '../helpers/api/mastodonAPI'
import type ClientappContent from '../types/ClientappContent'
import type ClientAppState from '../types/ClientAppState'

const initialState: ClientAppState = {
  clientappContent: {
    id: ``,
    name: ``,
    website: ``,
    redirect_uri: ``,
    client_id: ``,
    client_secret: ``,
    vapid_key: ``
  }
}

export const postClientAppAsync = createAsyncThunk(
  'timeline/postClientApp',
  async () => {
    const response = await postClientApp()
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
)

export const clientappSlice = createSlice({
  name: 'clientApp',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(postClientAppAsync.fulfilled, (state, action: PayloadAction<ClientappContent>) => {
          state.clientappContent = action.payload;
      })
  },
})

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectClientApp = (state: AppState) => state.clientapp

export default clientappSlice.reducer

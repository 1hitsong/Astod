import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import type { AppState } from '../../renderer/store'
import { postAuthToken } from '../helpers/api/mastodonAPI'
import type ClientAuthState from '../types/ClientAuthState'
import type ClientAuthContent from '../types/ClientAuthContent'

const initialState: ClientAuthState = {
  clientAuthContent: {
    access_token: ``,
    token_type: ``,
    scope: ``,
    created_at: null
  }
}

export const postAuthTokenAsync = createAsyncThunk(
  'timeline/postAuthToken',
  async () => {
    const response = await postAuthToken()
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
)

export const clientauthSlice = createSlice({
  name: 'clientAuth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(postAuthTokenAsync.fulfilled, (state, action: PayloadAction<ClientAuthContent>) => {
          state.clientAuthContent = action.payload;
      })
  },
})

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectClientAuth = (state: AppState) => state.clientauth

export default clientauthSlice.reducer
